/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mimelib-noiconv";
exports.ids = ["vendor-chunks/mimelib-noiconv"];
exports.modules = {

/***/ "(rsc)/./node_modules/mimelib-noiconv/content-types.js":
/*!*******************************************************!*\
  !*** ./node_modules/mimelib-noiconv/content-types.js ***!
  \*******************************************************/
/***/ ((module) => {

eval("// list of mime types\nmodule.exports = {\n    \"doc\": \"application/msword\",\n    \"docx\": \"application/msword\",\n    \"pdf\": \"application/pdf\",\n    \"rss\": \"application/rss+xml\",\n    \"xls\": \"application/vnd.ms-excel\",\n    \"xlsx\": \"application/vnd.ms-excel\",\n    \"pps\": \"application/vnd.ms-powerpoint\",\n    \"ppt\": \"application/vnd.ms-powerpoint\",\n    \"pptx\": \"application/vnd.ms-powerpoint\",\n    \"odp\": \"application/vnd.oasis.opendocument.presentation\",\n    \"ods\": \"application/vnd.oasis.opendocument.spreadsheet\",\n    \"odt\": \"application/vnd.oasis.opendocument.text\",\n    \"sxc\": \"application/vnd.sun.xml.calc\",\n    \"sxw\": \"application/vnd.sun.xml.writer\",\n    \"au\": \"audio/basic\",\n    \"snd\": \"audio/basic\",\n    \"flac\": \"audio/flac\",\n    \"mid\": \"audio/mid\",\n    \"rmi\": \"audio/mid\",\n    \"m4a\": \"audio/mp4\",\n    \"mp3\": \"audio/mpeg\",\n    \"oga\": \"audio/ogg\",\n    \"ogg\": \"audio/ogg\",\n    \"aif\": \"audio/x-aiff\",\n    \"aifc\": \"audio/x-aiff\",\n    \"aiff\": \"audio/x-aiff\",\n    \"wav\": \"audio/x-wav\",\n    \"gif\": \"image/gif\",\n    \"jpeg\": \"image/jpeg\",\n    \"jpg\": \"image/jpeg\",\n    \"jpe\": \"image/jpeg\",\n    \"png\": \"image/png\",\n    \"tiff\": \"image/tiff\",\n    \"tif\": \"image/tiff\",\n    \"wbmp\": \"image/vnd.wap.wbmp\",\n    \"bmp\": \"image/x-ms-bmp\",\n    \"ics\": \"text/calendar\",\n    \"csv\": \"text/comma-separated-values\",\n    \"css\": \"text/css\",\n    \"htm\": \"text/html\",\n    \"html\": \"text/html\",\n    \"text\": \"text/plain\",\n    \"txt\": \"text/plain\",\n    \"asc\": \"text/plain\",\n    \"diff\": \"text/plain\",\n    \"pot\": \"text/plain\",\n    \"vcf\": \"text/x-vcard\",\n    \"mp4\": \"video/mp4\",\n    \"mpeg\": \"video/mpeg\",\n    \"mpg\": \"video/mpeg\",\n    \"mpe\": \"video/mpeg\",\n    \"ogv\": \"video/ogg\",\n    \"qt\": \"video/quicktime\",\n    \"mov\": \"video/quicktime\",\n    \"avi\": \"video/x-msvideo\",\n    \"zip\": \"application/zip\",\n    \"rar\": \"application/x-rar-compressed\"\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWltZWxpYi1ub2ljb252L2NvbnRlbnQtdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hhaWF1cmNvZGUvLi9ub2RlX21vZHVsZXMvbWltZWxpYi1ub2ljb252L2NvbnRlbnQtdHlwZXMuanM/NDVjMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBsaXN0IG9mIG1pbWUgdHlwZXNcbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIFwiZG9jXCI6IFwiYXBwbGljYXRpb24vbXN3b3JkXCIsXG4gICAgXCJkb2N4XCI6IFwiYXBwbGljYXRpb24vbXN3b3JkXCIsXG4gICAgXCJwZGZcIjogXCJhcHBsaWNhdGlvbi9wZGZcIixcbiAgICBcInJzc1wiOiBcImFwcGxpY2F0aW9uL3Jzcyt4bWxcIixcbiAgICBcInhsc1wiOiBcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbFwiLFxuICAgIFwieGxzeFwiOiBcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbFwiLFxuICAgIFwicHBzXCI6IFwiYXBwbGljYXRpb24vdm5kLm1zLXBvd2VycG9pbnRcIixcbiAgICBcInBwdFwiOiBcImFwcGxpY2F0aW9uL3ZuZC5tcy1wb3dlcnBvaW50XCIsXG4gICAgXCJwcHR4XCI6IFwiYXBwbGljYXRpb24vdm5kLm1zLXBvd2VycG9pbnRcIixcbiAgICBcIm9kcFwiOiBcImFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQucHJlc2VudGF0aW9uXCIsXG4gICAgXCJvZHNcIjogXCJhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LnNwcmVhZHNoZWV0XCIsXG4gICAgXCJvZHRcIjogXCJhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LnRleHRcIixcbiAgICBcInN4Y1wiOiBcImFwcGxpY2F0aW9uL3ZuZC5zdW4ueG1sLmNhbGNcIixcbiAgICBcInN4d1wiOiBcImFwcGxpY2F0aW9uL3ZuZC5zdW4ueG1sLndyaXRlclwiLFxuICAgIFwiYXVcIjogXCJhdWRpby9iYXNpY1wiLFxuICAgIFwic25kXCI6IFwiYXVkaW8vYmFzaWNcIixcbiAgICBcImZsYWNcIjogXCJhdWRpby9mbGFjXCIsXG4gICAgXCJtaWRcIjogXCJhdWRpby9taWRcIixcbiAgICBcInJtaVwiOiBcImF1ZGlvL21pZFwiLFxuICAgIFwibTRhXCI6IFwiYXVkaW8vbXA0XCIsXG4gICAgXCJtcDNcIjogXCJhdWRpby9tcGVnXCIsXG4gICAgXCJvZ2FcIjogXCJhdWRpby9vZ2dcIixcbiAgICBcIm9nZ1wiOiBcImF1ZGlvL29nZ1wiLFxuICAgIFwiYWlmXCI6IFwiYXVkaW8veC1haWZmXCIsXG4gICAgXCJhaWZjXCI6IFwiYXVkaW8veC1haWZmXCIsXG4gICAgXCJhaWZmXCI6IFwiYXVkaW8veC1haWZmXCIsXG4gICAgXCJ3YXZcIjogXCJhdWRpby94LXdhdlwiLFxuICAgIFwiZ2lmXCI6IFwiaW1hZ2UvZ2lmXCIsXG4gICAgXCJqcGVnXCI6IFwiaW1hZ2UvanBlZ1wiLFxuICAgIFwianBnXCI6IFwiaW1hZ2UvanBlZ1wiLFxuICAgIFwianBlXCI6IFwiaW1hZ2UvanBlZ1wiLFxuICAgIFwicG5nXCI6IFwiaW1hZ2UvcG5nXCIsXG4gICAgXCJ0aWZmXCI6IFwiaW1hZ2UvdGlmZlwiLFxuICAgIFwidGlmXCI6IFwiaW1hZ2UvdGlmZlwiLFxuICAgIFwid2JtcFwiOiBcImltYWdlL3ZuZC53YXAud2JtcFwiLFxuICAgIFwiYm1wXCI6IFwiaW1hZ2UveC1tcy1ibXBcIixcbiAgICBcImljc1wiOiBcInRleHQvY2FsZW5kYXJcIixcbiAgICBcImNzdlwiOiBcInRleHQvY29tbWEtc2VwYXJhdGVkLXZhbHVlc1wiLFxuICAgIFwiY3NzXCI6IFwidGV4dC9jc3NcIixcbiAgICBcImh0bVwiOiBcInRleHQvaHRtbFwiLFxuICAgIFwiaHRtbFwiOiBcInRleHQvaHRtbFwiLFxuICAgIFwidGV4dFwiOiBcInRleHQvcGxhaW5cIixcbiAgICBcInR4dFwiOiBcInRleHQvcGxhaW5cIixcbiAgICBcImFzY1wiOiBcInRleHQvcGxhaW5cIixcbiAgICBcImRpZmZcIjogXCJ0ZXh0L3BsYWluXCIsXG4gICAgXCJwb3RcIjogXCJ0ZXh0L3BsYWluXCIsXG4gICAgXCJ2Y2ZcIjogXCJ0ZXh0L3gtdmNhcmRcIixcbiAgICBcIm1wNFwiOiBcInZpZGVvL21wNFwiLFxuICAgIFwibXBlZ1wiOiBcInZpZGVvL21wZWdcIixcbiAgICBcIm1wZ1wiOiBcInZpZGVvL21wZWdcIixcbiAgICBcIm1wZVwiOiBcInZpZGVvL21wZWdcIixcbiAgICBcIm9ndlwiOiBcInZpZGVvL29nZ1wiLFxuICAgIFwicXRcIjogXCJ2aWRlby9xdWlja3RpbWVcIixcbiAgICBcIm1vdlwiOiBcInZpZGVvL3F1aWNrdGltZVwiLFxuICAgIFwiYXZpXCI6IFwidmlkZW8veC1tc3ZpZGVvXCIsXG4gICAgXCJ6aXBcIjogXCJhcHBsaWNhdGlvbi96aXBcIixcbiAgICBcInJhclwiOiBcImFwcGxpY2F0aW9uL3gtcmFyLWNvbXByZXNzZWRcIlxufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mimelib-noiconv/content-types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mimelib-noiconv/index.js":
/*!***********************************************!*\
  !*** ./node_modules/mimelib-noiconv/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = __webpack_require__(/*! ./mime-functions */ \"(rsc)/./node_modules/mimelib-noiconv/mime-functions.js\");\nmodule.exports.contentTypes = __webpack_require__(/*! ./content-types */ \"(rsc)/./node_modules/mimelib-noiconv/content-types.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWltZWxpYi1ub2ljb252L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFDQSxzSEFBNEM7QUFDNUMsaUlBQXdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hhaWF1cmNvZGUvLi9ub2RlX21vZHVsZXMvbWltZWxpYi1ub2ljb252L2luZGV4LmpzP2NmNzIiXSwic291cmNlc0NvbnRlbnQiOlsiXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL21pbWUtZnVuY3Rpb25zXCIpO1xubW9kdWxlLmV4cG9ydHMuY29udGVudFR5cGVzID0gcmVxdWlyZShcIi4vY29udGVudC10eXBlc1wiKTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mimelib-noiconv/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mimelib-noiconv/mime-functions.js":
/*!********************************************************!*\
  !*** ./node_modules/mimelib-noiconv/mime-functions.js ***!
  \********************************************************/
/***/ (function() {

eval("\ntry{\n    // see http://github.com/bnoordhuis/node-iconv for more info\n    var Iconv = Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'iconv'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n}catch(E){\n    // convert nothing\n    Iconv = function(){}\n    Iconv.prototype.convert = function(buf){return buf;};\n}\n\n/* mime related functions - encoding/decoding etc*/\n/* TODO: Only UTF-8 and Latin1 are allowed with encodeQuotedPrintable */\n/* TODO: Check if the input string even needs encoding                */\n\n/**\n * mime.foldLine(str, maxLength, foldAnywhere) -> String\n * - str (String): mime string that might need folding\n * - maxLength (Number): max length for a line, defaults to 78\n * - foldAnywhere (Boolean): can fold at any location (ie. in base64)\n * - afterSpace (Boolean): If [true] fold after the space\n * \n * Folds a long line according to the RFC 5322\n *   <http://tools.ietf.org/html/rfc5322#section-2.1.1>\n * \n * For example:\n *     Content-Type: multipart/alternative; boundary=\"----bd_n3-lunchhour1283962663300----\"\n * will become\n *     Content-Type: multipart/alternative;\n *          boundary=\"----bd_n3-lunchhour1283962663300----\"\n * \n **/\nthis.foldLine = function(str, maxLength, foldAnywhere, afterSpace){\n    var line=false, curpos=0, response=\"\", lf;\n    maxLength = maxLength || 78;\n    \n    // return original if no need to fold\n    if(str.length<=maxLength)\n        return str;\n    \n    // read in <maxLength> bytes and try to fold it\n    while(line = str.substr(curpos, maxLength)){\n        if(!!foldAnywhere){\n            response += line;\n            if(curpos+maxLength<str.length){\n                response+=\"\\r\\n\";\n            }\n        }else{\n            lf = line.lastIndexOf(\" \");\n            if(lf<=0)\n                lf = line.lastIndexOf(\"\\t\");\n            if(line.length>=maxLength && lf>0){\n                if(!!afterSpace){\n                    // move forward until line end or no more \\s and \\t\n                    while(lf<line.length && (line.charAt(lf)==\" \" || line.charAt(lf)==\"\\t\")){\n                        lf++;\n                    }\n                }\n                response += line.substr(0,lf)+\"\\r\\n\"+(!foldAnywhere && !afterSpace && \"       \" || \"\");\n                curpos -= line.substr(lf).length;\n            }else{\n                response += line;\n                //line = line.replace(/=[a-f0-9]?$/i, \"\");\n                //response+=line + \"\\r\\n\";\n            }\n        }\n        curpos += line.length;\n    }\n    \n    // return folded string\n    return response;\n}\n\n\n/**\n * mime.encodeMimeWord(str, encoding, charset) -> String\n * - str (String): String to be encoded\n * - encoding (String): Encoding Q for quoted printable or B (def.) for base64\n * - charset (String): Charset to be used\n * \n * Encodes a string into mime encoded word format\n *   <http://en.wikipedia.org/wiki/MIME#Encoded-Word>\n *\n * For example:\n *     See on õhin test\n * Becomes with UTF-8 and Quoted-printable encoding\n *     =?UTF-8?q?See_on_=C3=B5hin_test?=\n * \n **/\nthis.encodeMimeWord = function(str, encoding, charset){\n    charset = charset || \"UTF-8\";\n    encoding = encoding && encoding.toUpperCase() || \"B\";\n    \n    if(encoding==\"Q\"){\n        str = this.encodeQuotedPrintable(str, true, charset);\n    }\n    \n    if(encoding==\"B\"){\n        str = this.encodeBase64(str);\n    }\n    \n    return \"=?\"+charset+\"?\"+encoding+\"?\"+str+\"?=\";\n}\n\n/**\n * mime.decodeMimeWord(str, encoding, charset) -> String\n * - str (String): String to be encoded\n * - encoding (String): Encoding Q for quoted printable or B (def.) for base64\n * - charset (String): Charset to be used, defaults to UTF-8\n * \n * Decodes a string from mime encoded word format, see [[encodeMimeWord]]\n * \n **/\n\nthis.decodeMimeWord = function(str){\n    var parts = str.split(\"?\"),\n        charset = parts && parts[1],\n        encoding = parts && parts[2],\n        text = parts && parts[3];\n    if(!charset || !encoding || !text)\n        return str;\n    if(encoding.toUpperCase()==\"Q\"){\n        return this.decodeQuotedPrintable(text, true, charset);\n    }\n    \n    if(encoding.toUpperCase()==\"B\"){\n        return this.decodeBase64(text);\n    }\n    \n    return text;\n}\n\n\n/**\n * mime.encodeQuotedPrintable(str, mimeWord, charset) -> String\n * - str (String): String to be encoded into Quoted-printable\n * - mimeWord (Boolean): Use mime-word mode (defaults to false)\n * - charset (String): Destination charset, defaults to UTF-8\n *   TODO: Currently only allowed charsets: UTF-8, LATIN1\n * \n * Encodes a string into Quoted-printable format. \n **/\nthis.encodeQuotedPrintable = function(str, mimeWord, charset){\n    charset = charset || \"UTF-8\";\n    \n    /*\n     * Characters from 33-126 OK (except for =; and ?_ when in mime word mode)\n     * Spaces + tabs OK (except for line beginnings and endings)  \n     * \\n + \\r OK\n     */\n    \n    str = str.replace(/(?:[\\ud800-\\udbff][\\udc00-\\udfff])|[^\\sa-zA-Z\\d]/gm,function(c){\n        if(!!mimeWord){\n            if(c==\"?\")return \"=3F\";\n            if(c==\"_\")return \"=5F\";\n        }\n        if(c!==\"=\" && c.charCodeAt(0)>=33 && c.charCodeAt(0)<=126)\n            return c;\n        return c==\"=\"?\"=3D\":(charset==\"UTF-8\"?encodeURIComponent(c):escape(c)).replace(/%/g,'=');\n    });\n    \n    str = lineEdges(str);\n\n    if(!mimeWord){\n        // lines might not be longer than 76 bytes, soft break: \"=\\r\\n\"\n        var lines = str.split(/\\r?\\n/);\n        str.replace(/(.{73}(?!\\r?\\n))/,\"$&=\\r\\n\")\n        for(var i=0, len = lines.length; i<len; i++){\n            if(lines[i].length>76){\n                lines[i] = this.foldLine(lines[i],76, false, true).replace(/\\r\\n/g,\"=\\r\\n\");\n            }\n        }\n        str = lines.join(\"\\r\\n\");\n    }else{\n        str = str.replace(/\\s/g, function(a){\n            if(a==\" \")return \"_\";\n            if(a==\"\\t\")return \"=09\";\n            return a==\"\\r\"?\"=0D\":\"=0A\";\n        });\n    }\n\n    return str;\n}\n\n/**\n * mime.deccodeQuotedPrintable(str, mimeWord, charset) -> String\n * - str (String): String to be decoded\n * - mimeWord (Boolean): Use mime-word mode (defaults to false)\n * - charset (String): Charset to be used, defaults to UTF-8\n * \n * Decodes a string from Quoted-printable format. \n **/\nthis.decodeQuotedPrintable = function(str, mimeWord, charset){\n    charset = charset && charset.toUpperCase() || \"UTF-8\";\n\n    if(mimeWord){\n        str = str.replace(/_/g,\" \");\n    }else{\n        str = str.replace(/=\\r\\n/gm,'');\n        str = str.replace(/=$/,\"\");\n    }\n    if(charset == \"UTF-8\")\n        str = decodeURIComponent(str.replace(/%/g,'%25').replace(/=/g,\"%\"));\n    else{\n        str = str.replace(/%/g,'%25').replace(/=/g,\"%\");\n        if(charset==\"ISO-8859-1\" || charset==\"LATIN1\")\n            str = unescape(str);\n        else{\n            str = decodeBytestreamUrlencoding(str);\n            str = fromCharset(charset, str);\n        }\n    }\n    return str;\n}\n\n/**\n * mime.encodeBase64(str) -> String\n * - str (String): String to be encoded into Base64\n * - charset (String): Destination charset, defaults to UTF-8\n * \n * Encodes a string into Base64 format. Base64 is mime-word safe. \n **/\nthis.encodeBase64 = function(str, charset){\n    var buffer;\n    if(charset && charset.toUpperCase()!=\"UTF-8\")\n        buffer = toCharset(charset, str);\n    else\n        buffer = new Buffer(str, \"UTF-8\");\n    return buffer.toString(\"base64\");\n}\n\n/**\n * mime.decodeBase64(str) -> String\n * - str (String): String to be decoded from Base64\n * - charset (String): Source charset, defaults to UTF-8\n * \n * Decodes a string from Base64 format. Base64 is mime-word safe.\n * NB! Always returns UTF-8 \n **/\nthis.decodeBase64 = function(str, charset){\n    var buffer = new Buffer(str, \"base64\");\n    \n    if(charset && charset.toUpperCase()!=\"UTF-8\"){\n        return fromCharset(charset, buffer);\n    }\n    \n    // defaults to utf-8\n    return buffer.toString(\"UTF-8\");\n}\n\n/**\n * mime.parseHeaders(headers) -> Array\n * - headers (String): header section of the e-mail\n * \n * Parses header lines into an array of objects (see [[parseHeaderLine]])\n * FIXME: This should probably not be here but in \"envelope\" instead\n **/\nthis.parseHeaders = function(headers){\n    var text, lines, line, i, name, value, cmd, header_lines = {};\n    // unfold\n    headers = headers.replace(/\\r?\\n([ \\t])/gm,\" \");\n\n    // split lines\n    lines = headers.split(/\\r?\\n/);\n    for(i=0; i<lines.length;i++){\n        if(!lines[i]) // no more header lines\n            break;\n        cmd = lines[i].match(/[^\\:]+/);\n        if(cmd && (cmd = cmd[0])){\n            name = cmd;\n            value = lines[i].substr(name.length+1);\n            if(!header_lines[name.toLowerCase().trim()])header_lines[name.toLowerCase().trim()] = [];\n            header_lines[name.toLowerCase()].push(value.trim());\n        }\n    }\n    \n    return header_lines;\n}\n\n/**\n * mime.parseAddresses(addresses) -> Array\n * - addresses (String): string with comma separated e-mail addresses\n * \n * Parses names and addresses from a from, to, cc or bcc line\n **/\nthis.parseAddresses = function(addresses){\n    if(!addresses)\n        return [];\n\n    addresses = addresses.replace(/\\=\\?[^?]+\\?[QqBb]\\?[^?]+\\?=/g, (function(a){return this.decodeMimeWord(a);}).bind(this));\n    \n    // not sure if it's even needed - urlencode escaped \\\\ and \\\" and \\'\n    addresses = addresses.replace(/\\\\\\\\/g,function(a){return escape(a.charAt(1));});\n    addresses = addresses.replace(/\\\\[\"']/g,function(a){return escape(a.charAt(1));});\n    \n    // find qutoed strings\n    \n    var parts = addresses.split(','), curStr,\n        curQuote, lastPos, remainder=\"\", str, list = [],\n        curAddress, address, addressArr = [], name, email, i, len;\n    var rightEnd;\n\n    // separate quoted text from text parts\n    for(i=0, len=parts.length; i<len; i++){\n        str = \"\";\n    \n        curStr = (remainder+parts[i]).trim();\n        \n        curQuote = curStr.charAt(0);\n        if(curQuote == \"'\" || curQuote == '\"'){\n            rightEnd= curStr.indexOf(\"<\");\n            if(rightEnd == -1)rightEnd= curStr.length-1;\n            lastPos = curStr.lastIndexOf(curQuote,rightEnd);\n            \n            if(!lastPos){\n                remainder = remainder+parts[i]+\",\";\n                continue;\n            }else{\n                remainder = \"\";\n                str = curStr.substring(1, lastPos).trim();\n                address = curStr.substr(lastPos+1).trim();\n            }\n            \n        }else{\n            address = curStr;\n        }\n        \n        list.push({name: str, address: address, original: curStr});\n    }\n  \n    // find e-mail addresses and user names\n    for(i=0, len=list.length; i<len; i++){\n        curAddress = list[i];\n        \n        email = false;\n        name = false;\n        \n        name = curAddress.name;\n        \n        address = curAddress.address.replace(/<([^>]+)>/, function(original, addr){\n            email = addr.indexOf(\"@\")>=0 && addr;\n            return email ? \"\" : original;\n        }).trim();\n        \n        if(!email){\n            address = address.replace(/(\\S+@\\S+)/, function(original, m){\n                email = m;\n                return email ? \"\" : original;\n            });\n        }\n        \n        if(!name){\n            if(email){\n                email = email.replace(/\\(([^)]+)\\)/,function(original, n){\n                    name = n;\n                    return \"\";\n                });\n            }\n            if(!name){\n                name = address.replace(/\"/g,\"\").trim();\n            }\n        }\n        \n        // just in case something got mixed up\n        if(!email && name.indexOf(\"@\")>=0){\n            email = name;\n            name = false;\n        }\n        \n        if(name || email){\n            name = (name || \"\").replace(/%27/g, \"'\").replace(/%22/g, \"\\\"\");\n            email = (email || \"\").replace(/%27/g, \"'\").replace(/%22/g, \"\\\"\");\n            addressArr.push({address: email, name: name});\n\n        }\n    }\n    return addressArr;\n};\n\n/**\n * mime.parseMimeWords(str) -> String\n * - str (String): string to be parsed\n * \n * Parses mime-words into UTF-8 strings\n **/\nthis.parseMimeWords = function(str){\n    return str.replace(/=\\?[^?]+\\?[QqBb]\\?[^?]+\\?=/g, (function(a){\n        return this.decodeMimeWord(a);\n    }).bind(this));\n}\n\n/**\n * mime.parseHeaderLine(line) -> Object\n * - line (String): a line from a message headers\n * \n * Parses a header line to search for additional parameters.\n * For example with \"text/plain; charset=utf-8\" the output would be\n *   - defaultValue = text/plain\n *   - charset = utf-8\n **/\nthis.parseHeaderLine = function(line){\n    if(!line)\n        return {};\n    var result = {}, parts = line.split(\";\"), pos;\n    for(var i=0, len = parts.length; i<len; i++){\n        pos = parts[i].indexOf(\"=\");\n        if(pos<0){\n            result[!i?\"defaultValue\":\"i-\"+i] = parts[i].trim();\n        }else{\n            result[parts[i].substr(0,pos).trim().toLowerCase()] = parts[i].substr(pos+1).trim();\n        }\n    }\n    return result;\n}\n\n\n/* Helper functions */\n\n/**\n * lineEdges(str) -> String\n * - str (String): String to be processed\n * \n * Replaces all spaces and tabs in the beginning and end of the string\n * with quoted printable encoded chars. Needed by [[encodeQuotedPrintable]]\n **/\nfunction lineEdges(str){\n    str = str.replace(/^[ \\t]+/gm, function(wsc){\n        return wsc.replace(/ /g,\"=20\").replace(/\\t/g,\"=09\"); \n    });\n    \n    str = str.replace(/[ \\t]+$/gm, function(wsc){\n        return wsc.replace(/ /g,\"=20\").replace(/\\t/g,\"=09\"); \n    });\n    return str;\n}\n\n/**\n * fromCharset(charset, buffer, keep_buffer) -> String | Buffer\n * - charset (String): Source charset\n * - buffer (Buffer): Buffer in <charset>\n * - keep_buffer (Boolean): If true, return buffer, otherwise UTF-8 string\n * \n * Converts a buffer in <charset> codepage into UTF-8 string\n **/\nfunction fromCharset(charset, buffer, keep_buffer){\n    var iconv = new Iconv(charset,'UTF-8'),\n        buffer = iconv.convert(buffer);\n    return keep_buffer?buffer:buffer.toString(\"utf-8\");\n}\n\n/**\n * toCharset(charset, buffer) -> Buffer\n * - charset (String): Source charset\n * - buffer (Buffer): Buffer in UTF-8 or string\n * \n * Converts a string or buffer to <charset> codepage\n **/\nfunction toCharset(charset, buffer){\n    var iconv = new Iconv('UTF-8',charset);\n    return iconv.convert(buffer);\n}\n\n/**\n * decodeBytestreamUrlencoding(encoded_string) -> Buffer\n * - encoded_string (String): String in urlencode coding\n * \n * Converts an urlencoded string into a bytestream buffer. If the used\n * charset is known the resulting string can be converted to UTF-8 with\n * [[fromCharset]]. \n * NB! For UTF-8 use decodeURIComponent and for Latin 1 decodeURL instead \n **/\nfunction decodeBytestreamUrlencoding(encoded_string){\n    var c, i, j=0, prcnts = encoded_string.match(/%/g) || \"\",\n            buffer_length = encoded_string.length - (prcnts.length*2),\n        buffer = new Buffer(buffer_length);\n\n    for(var i=0; i<encoded_string.length; i++){\n        c = encoded_string.charCodeAt(i);\n        if(c==\"37\"){ // %\n            c = parseInt(encoded_string.substr(i+1,2), 16);\n            i+=2;\n        }\n        buffer[j++] = c;\n    }\n    return buffer;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mimelib-noiconv/mime-functions.js\n");

/***/ })

};
;