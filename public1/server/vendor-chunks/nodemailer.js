/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/nodemailer";
exports.ids = ["vendor-chunks/nodemailer"];
exports.modules = {

/***/ "(rsc)/./node_modules/nodemailer/lib/mail.js":
/*!*********************************************!*\
  !*** ./node_modules/nodemailer/lib/mail.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var SMTPClient = exports.SMTPClient = __webpack_require__(/*! ./smtp */ \"(rsc)/./node_modules/nodemailer/lib/smtp.js\").SMTPClient,\n    mimelib = __webpack_require__(/*! mimelib-noiconv */ \"(rsc)/./node_modules/mimelib-noiconv/index.js\"),\n    exec = (__webpack_require__(/*! child_process */ \"child_process\").exec)\n    util = __webpack_require__(/*! util */ \"util\"),\n    EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter)\n/*\n * Version constants\n */\nvar X_MAILER_NAME = \"Nodemailer\",\n    X_MAILER_VERSION = \"0.1.20; +http://www.nodemailer.org\";\n\n/**\n * mail\n * \n * Provides an API to send e-mails with Node.js through a SMTP server.\n * This API is unicode friendly, you don't have to escape non-ascii chars.\n * \n * NB! Before sending any e-mails, update mail.SMTP with correct values\n * \n **/\n\n\n// EXPOSE TO THE WORLD\n\n/**\n * mail.SMTP -> Object\n * \n * Configuration object, keeps the needed values to connect to the SMTP server\n * \n *   - **host** Hostname of the SMTP server (required)\n *   - **port** SMTP server port, defaults to 25\n *   - **hostname** hostname of the local server, needed for identifying,\n *     defaults to *untitled.server*\n *   - **use_authentication** if set to *true* authentication procedure is\n *     run after a successful connection\n *   - **user** username for authentication\n *   - **pass** password for authentication\n **/\nexports.SMTP = {\n    host: false,\n    port: false,\n    hostname: false,\n    use_authentication: false,\n    ssl: false,\n    user: false,\n    pass: false\n};\n\nexports.CommonServers = {\n    gmail:[],\n    yahoo:[],\n    hotmail:[]\n};\n\n/**\n * mail.sendmail -> Boolean | String\n * \n * If set to true, \"sendmail\" command will be used instead of SMTP\n * If the value is a String then it will be used as the sendmail command\n * \n *     mail.sendmail = true\n * \n * or\n * \n *     mail.sendmail = \"/path/to/sendmail\"\n **/\nexports.sendmail = false;\n\n// Expose EmailMessage for the world\nexports.EmailMessage = EmailMessage;\n\n/**\n * mail.send_mail(params, callback) -> undefined\n * - params (Object): e-mail data\n * - callback (Function): will be run after completion\n * \n * Shortcut function to send e-mails. See EmailMessage for param structure\n **/\nexports.send_mail = function(params, callback){\n    var em = new EmailMessage(params);\n    em.send(callback);\n    return em;\n};\n\nvar gencounter = 0,\n    instancecounter = 0;\n\n/**\n * new mail.EmailMessage(params)\n * - params (Object): message data (can be altered afterwards)\n * \n * Creates an object to send an e-mail.\n * \n * params can hold the following data\n *\n *   - **server** server to send message to (will default to exports.SMTP)\n *   - **sender** e-mail address of the sender\n *   - **headers** an object with custom headers.\n *     `{\"X-Myparam\": \"test\", \"Message-ID\":\"12345\"}`\n *   - **to** comma separated list of TO: addressees\n *   - **cc** comma separated list of CC: addressees\n *   - **bcc** comma separated list of BCC: addressees\n *   - **reply_to** A reply-to address\n *   - **subject** Message subject\n *   - **body** Message body in plain text\n *   - **html** Message body in HTML format\n *   - **attachments** an array of attachements of {filename, contents, cid}\n *     filename (mandatory) is a String, contents can be String or Buffer,\n *     cid is optional.\n * \n *   - **debug** if set, outputs the whole communication of SMTP server to console\n * \n * All the params can be edited/added after defining the object\n *\n * Events:\n *     forward(oldAddr,newAddr) - was told to try new address by server.\n *     defer(addr) - server takes responsibility for delivery.\n *     retain(addr) - unable to send to mailbox.\n * Usage:\n *     var em = EmailMessage();\n *     em.sender = '\"Andris Reinman\" <andris@node.ee>'\n *     em.to = 'andris@kreata.ee'\n *     em.body = \"Hello world!\";\n *     em.send(function(error, success){});\n *     \n *  NB! mail.SMTP needs to be set before sending any e-mails!\n **/\nfunction EmailMessage(params){\n    EventEmitter.call(this);\n    params = params || {};\n    this.SERVER = params.server || exports.SMTP;\n    this.sender = params.sender;\n    this.headers = params.headers || {};\n    this.to = params.to;\n    this.cc = params.cc;\n    this.bcc = params.bcc;\n    this.reply_to = params.reply_to;\n    this.subject = params.subject || \"\";\n    this.body = params.body || \"\";\n    this.html = params.html;\n    this.attachments = params.attachments || [];\n    \n    this.debug = !!params.debug;\n    \n    this.charset = params.charset || \"UTF-8\";\n    this.encoding = params.encoding || \"quoted-printable\";\n    \n    this.callback = null;\n}\nvar utillib = __webpack_require__(/*! util */ \"util\");\nutil.inherits(EmailMessage,EventEmitter);\n\n/**\n * mail.EmailMessage#prepareVariables() -> undefined\n * \n * Prepares some needed variables\n **/\nEmailMessage.prototype.prepareVariables = function(){\n    if(this.html || this.attachments.length){\n        this.content_multipart = true;\n        this.content_mixed = !!this.attachments.length;\n    //'=_' is not valid quoted printable\n    //'?' is not in any known base64 extension\n        this.content_boundary = \"----NODEMAILER-?=_\"+(++gencounter)+\"-\"+Date.now();\n        \n        // defaults to multipart/mixed but if there's attachments with cid value set\n        // use multipart/related - mail clients hide the duplicates this way\n        var mixed = \"mixed\";\n        for(var i=0, len=this.attachments.length; i<len;i++){\n            if(this.attachments[i].cid){\n                mixed = \"related\";\n                break;\n            }\n        }\n        this.content_type = \"multipart/\"+(this.content_mixed?mixed:\"alternative\")+\n                \"; boundary=\\\"\"+this.content_boundary+\"\\\"\";\n    }else{\n        this.content_multipart = false;\n        this.content_type = \"text/plain; charset=\"+this.charset;\n        this.content_transfer_encoding = this.encoding;  // Changed from quoted-printable; 5/23/2011.\n    }\n}\n\n/**\n * mail.EmailMessage#generateHeaders() -> String\n * \n * Generates a header string where lines are separated by \\r\\n\n **/\nEmailMessage.prototype.generateHeaders = function(){\n    \n    var headers = [];\n    \n    // Mime\n    headers.push([\n        \"X-Mailer\",\n        X_MAILER_NAME+\" (\"+X_MAILER_VERSION+\")\"\n    ].join(\": \"));\n    \n    // add custom\n    var keys = Object.keys(this.headers);\n    for(var i=0, len=keys.length; i<len; i++){\n        headers.push([\n            upperFirst(keys[i].trim()),\n            this.headers[keys[i]]\n        ].join(\": \"));\n    }\n    \n    // Date\n    var date = new Date;\n    headers.push([\n        upperFirst(\"Date\"),\n        date.toGMTString()\n    ].join(\": \"));\n\n    // From\n    var from = this.generateAddresses(this.sender,1, \"fromAddress\");\n    if(from.length){\n        headers.push([\n            upperFirst(\"From\"),\n            from\n        ].join(\": \"));    \n    }\n    \n    // To\n    var to = this.generateAddresses(this.to, 0, \"toAddress\");\n    if(to.length){\n        headers.push([\n            upperFirst(\"To\"),\n            to\n        ].join(\": \"));    \n    }\n    \n    // CC\n    var cc = this.generateAddresses(this.cc, 0, \"toAddress\");\n    if(cc.length){\n        headers.push([\n            upperFirst(\"Cc\"),\n            cc\n        ].join(\": \"));    \n    }\n    \n    // BCC\n    var bcc = this.generateAddresses(this.bcc, 0, \"toAddress\");\n    if(exports.sendmail && bcc.length){\n        headers.push([\n            upperFirst(\"Bcc\"),\n            bcc\n        ].join(\": \"));\n    }\n\n    //Reply-To\n    var reply_to = this.generateAddresses(this.reply_to, 1);\n    if(reply_to.length){\n        headers.push([\n            upperFirst(\"Reply-To\"),\n            reply_to\n        ].join(\": \"));\n    }\n    \n    // Subject\n    headers.push([\n        upperFirst(\"Subject\"),\n        this.subject && (hasUTFChars(this.subject) && \n              mimelib.encodeMimeWord(this.subject, \"Q\") || this.subject) || ''\n    ].join(\": \"));\n\n    // Mime\n    headers.push([\n        \"MIME-Version\",\n        \"1.0\"\n    ].join(\": \")); \n    \n    // Content-type\n    headers.push([\n        \"Content-Type\",\n        this.content_type\n    ].join(\": \")); \n    \n    if(!this.content_multipart){\n        headers.push([\n            \"Content-Transfer-Encoding\",\n            this.content_transfer_encoding\n        ].join(\": \"));\n    }\n    \n    // output\n    return headers.map(function(elm){\n        return mimelib.foldLine(elm);\n    }).join(\"\\r\\n\");\n}\n\n/**\n * mail.EmailMessage#generateBody() -> String\n * \n * Generates a body string. If this is a multipart message then different\n * parts will be separated by boundary, body+html are put into separate\n * multipart/alternate block\n **/\nEmailMessage.prototype.generateBody = function(){\n\n    if(!this.content_multipart){\n        return this.body && mimelib.encodeQuotedPrintable(this.body) || \"\";\n    }\n    \n    var body_boundary = this.content_mixed?\n            \"----NODEMAILER-?=_\"+(++gencounter)+\"-\"+Date.now():\n            this.content_boundary,\n        rows = [];\n    \n\n    if(this.content_mixed){\n        rows.push(\"--\"+this.content_boundary);\n        rows.push(\"Content-Type: multipart/alternative; boundary=\\\"\"+body_boundary+\"\\\"\");\n        rows.push(\"\");\n    }\n    \n    if(!this.body.trim() && this.html){\n        this.body = stripHTML(this.html);\n    }\n    \n    // body\n    rows.push(\"--\"+body_boundary);\n    rows.push(\"Content-Type: text/plain; charset=\"+this.charset);\n    rows.push(\"Content-Transfer-Encoding: \"+this.encoding); // Changed from quoted-printable; 5/23/2011.\n    rows.push(\"\");\n    // dots in the beginning of the lines will be replaced with double dots\n    rows.push(mimelib.encodeQuotedPrintable(this.body.trim()).replace(/^\\./gm,'..'));\n    rows.push(\"\");\n    \n    // html\n    if(this.html){\n        rows.push(\"--\"+body_boundary);\n        rows.push(\"Content-Type: text/html; charset=\"+this.charset);\n        rows.push(\"Content-Transfer-Encoding: \"+this.encoding); // Changed from quoted-printable; 5/23/2011.\n        rows.push(\"\");\n        rows.push(mimelib.encodeQuotedPrintable(this.html.trim()).replace(/^\\./gm,'..'));\n        rows.push(\"\");\n    }\n    \n    if(this.content_mixed){\n        rows.push(\"--\"+body_boundary+\"--\");\n    }\n    \n    // attachments\n    var current;\n    for(var i=0; i<this.attachments.length; i++){\n\n        current = {\n            filename: hasUTFChars(this.attachments[i].filename)?\n                    mimelib.encodeMimeWord(this.attachments[i].filename, \"Q\"):\n                    this.attachments[i].filename.replace(/\"/g,''),\n            mime_type: getMimeType(this.attachments[i].filename),\n            contents: this.attachments[i].contents instanceof Buffer?\n                    this.attachments[i].contents:\n                    new Buffer(this.attachments[i].contents, \"utf-8\"),\n            disposition: \"attachment\",\n            content_id: this.attachments[i].cid || ((++gencounter)+\".\"+Date.now()+\"@\"+(this.SERVER.hostname || \"localhost\"))\n        };\n        \n        \n        rows.push(\"--\"+this.content_boundary);\n        \n        rows.push(\"Content-Type: \"+current.mime_type+\"; name=\\\"\"+current.filename+\"\\\"\");\n        rows.push(\"Content-Disposition: \"+current.disposition+\"; filename=\\\"\"+current.filename+\"\\\"\");\n        rows.push(\"Content-ID: <\"+current.content_id+\">\");\n        \n        rows.push(\"Content-Transfer-Encoding: base64\");\n        rows.push(\"\");\n        \n        /* Changed to conform with RFC-2045 section 6.7. */\n        rows.push(current.contents.toString(\"base64\").replace(/.{76}/g,\"$&\\r\\n\"));\n        \n    }\n    \n    \n    rows.push(\"--\"+this.content_boundary+\"--\");\n    \n    return rows.join(\"\\r\\n\");\n    \n}\n\n/**\n * mail.EmailMessage#generateAddresses(addresses, limit, use_list) -> String\n * - addresses (String): Comma separated list of addresses\n * - limit (String): How many addresses will be used from the list\n * - use_list (String): property name where to add plain e-mail addresses\n * \n * Parses an address string, finds the data and normalizes it. If use_string\n * is set, (ie. \"toAddress\") then found e-mail addresses are appended to\n * a list with the same name (this.toAddress). Plain e-mail addresses are\n * needed for the SMTP server.\n **/\n\nEmailMessage.prototype.generateAddresses = function(addresses, limit, use_list){\n    var parsed, output = [], current;\n    \n    limit = limit || 0;\n    \n    try{\n        parsed = mimelib.parseAddresses(addresses);\n    }catch(E){parsed = [];}\n    \n    var list = [];\n    for(var i=0; i<parsed.length; i++){\n        current = parsed[i];\n        current.address = current.address && current.address.trim();\n        if(!current.address)continue;\n        \n        list.push(current.address);\n        \n        if(hasUTFChars(current.address)){\n            current.address = mimelib.encodeMimeWord(current.address, \"Q\");\n        }\n        \n        if(current.name){\n            current.name = upperFirst(current.name.trim(), true);\n            if(hasUTFChars(current.name)){\n                current.name = mimelib.encodeMimeWord(current.name, \"Q\");\n            }\n            current.name = '\"' + current.name + '\"';\n            current.address = '<' + current.address.trim() +'>';\n            output.push(current.name + \" \" +current.address);\n        }else{\n            output.push(current.address);\n        }\n    }\n\n    if(limit && output.length>limit){\n        output = output.slice(0, limit);\n        list = list.slice(0, limit);\n    }\n    \n    if(use_list){\n        if(!this[use_list]){\n            this[use_list] = list;\n        }else{\n            this[use_list] = this[use_list].concat(list);\n        }\n    }\n    \n    return output.join(\", \");\n}\n\n/**\n * mail.EmailMessage#send(callback) -> undefined\n * - callback (Function): function to be called if sending succeedes or fails\n * \n * Generates a full message body and forwards it to the SMTP server.\n * callback gets two params - error and success. If error is set, then\n * something bad happened, if there's no error but success is false, then\n * SMTP server failed and the message should be resent. If there's no error\n * and success is true, then the message was sent to the recipients\n **/\nEmailMessage.prototype.send = function(callback){\n    this.prepareVariables();\n    \n    var instanceId = ++instancecounter;\n    \n    if(this.debug){\n        var str = X_MAILER_NAME+\", \"+X_MAILER_VERSION+\", Node.js \"+process.version+\": \"+instanceId;\n        console.log(str);\n        console.log(Array(str.length+1).join(\"=\")+\"\\n\");\n    }\n    \n    // use sendmail if set\n    if(exports.sendmail){\n        var headers = this.generateHeaders(),\n            body = this.generateBody();\n\n        var path = typeof exports.sendmail==\"string\"?exports.sendmail:\"sendmail\";\n        exec('echo \"'+(headers+\"\\r\\n\\r\\n\"+body).replace(/\"/g,'\\\\\"')+'\" | '+path+\" -t\", function(error){\n            process.nextTick(function(){\n                if(error){\n                    callback && callback(error, null);\n                }else{\n                    callback && callback(null, true);\n                }\n            });\n        });\n       return;\n    }\n    \n    // use SERVER\n    var client = new SMTPClient(this.SERVER.host, this.SERVER.port, {\n            hostname: this.SERVER.hostname,\n            use_authentication: this.SERVER.use_authentication,\n            user: this.SERVER.user,\n            pass: this.SERVER.pass,\n            ssl: this.SERVER.ssl,\n            debug: this.debug,\n            instanceId: instanceId\n        });\n    \n    client.on(\"empty\",function() {\n        client.send(\"QUIT\",function() {\n            client.close();    \n        });\n    });\n    \n    client.on(\"connection_stable\", (function(){\n        this.emit.apply(this,[\"connection_stable\"].concat([].slice.call(arguments)));\n    }).bind(this));\n    \n    client.on(\"error\", function(error){\n        callback && callback(error, null);\n    });\n    \n    client.sendMail(this, callback);\n}\n\n/**\n * getMimeType(filename) -> String\n * - filename (String): Failinimi, mille mime tüüpi otsida\n * \n * Otsib välja faililaiendi alusel õige mime tüübi, vaikimisi\n * kui tüüpi ei leita on application/octet-stream\n **/\nfunction getMimeType(filename){\n    var defaultMime = \"application/octet-stream\",\n        extension = filename && filename.substr(filename.lastIndexOf(\".\")+1).trim().toLowerCase();\n    return extension && mimelib.contentTypes[extension] || defaultMime;\n}\n\n\n/**\n * upperFirst(str) -> String\n * - str (String): string to be converted\n * \n * Converts first letters upper case, other lower case\n * \n * \"x-name-value\" -> \"X-Name-Value\"\n * \n **/\nfunction upperFirst(str, keepUpper){\n    if(!keepUpper){\n        str = str.toLowerCase();\n    }\n    return str.replace(/^\\s*[a-z]|[\\-\\s][a-z]/g,function(c){\n        return c.toUpperCase()\n    });\n}\n\n/**\n * hasUTFChars(str) -> Boolean\n * - str (String): String to be checked for non-ascii chars\n * \n * Tries to detect if a string has non-ascii characters. In this case the\n * string needs to be encoded before sent to the SMTP server\n **/\nfunction hasUTFChars(str){\n    var rforeign = /[^\\u0000-\\u007f]/;\n    return !!rforeign.test(str);\n}\n\n/**\n * stripHTML(str) -> String\n * - str (String): HTML string to be converted\n * \n * Converts a HTML string into plain text\n **/\nfunction stripHTML(str){\n    if(!str)return str;\n    \n    str = str instanceof Buffer ? str.toString(\"utf-8\"):str;\n    \n    str = str.replace(/\\r?\\n/g,\" \");\n    str = str.replace(/<(?:\\/p|br|\\/tr|\\/table|\\/div)>/g,\"\\n\");\n\n    // hide newlines with two 00 chars (enables multiline matches)\n    str = str.replace(/\\r?\\n/g,\"-\\u0000\\u0000-\");\n    \n    // H1-H6, add underline\n    str = str.replace(/<[hH]\\d[^>]*>(.*?)<\\/[hH]\\d[^>]*>/g,function(a,b){\n        var line = \"\";\n        b = b.replace(/<[^>]*>/g,\" \");\n        b = b.replace(/\\s\\s+/g,\" \");\n        b = b.trim();\n        \n        if(!b)\n            return \"\";\n        for(var i=0, len = b.length; i<len; i++){\n            line+=\"-\";\n        }\n        return b+\"\\n\"+line+\"\\n\\n\";\n    });\n\n    // LI, indent by 2 spaces + *\n    str = str.replace(/<li[^>]*>(.*?)<\\/?(?:li|ol|ul)[^>]*>/ig,function(a,b){\n        b = b.replace(/<[^>]*>/g,\" \");\n        b = b.replace(/\\s\\s+/g,\" \");\n        b = b.trim();\n        \n        if(!b)\n            return \"\";\n        return \"-®®®®-* \"+b+\"\\n\";\n    });\n\n    // PRE, indent by 4 spaces\n    str = str.replace(/<pre[^>]*>(.*?)<\\/pre[^>]*>/ig,function(a,b){\n        b = b.replace(/<[^>]*>/g,\" \");\n        b = b.replace(/\\s\\s+/g,\" \");\n        b = b.trim();\n        \n        if(!b)\n            return \"\";\n\n        b = b.replace(/[ \\t]*\\n[ \\t]*/g,\"\\n-®®®®--®®®®-\");\n        \n        return \"\\n-®®®®--®®®®-\"+b.trim()+\"\\n\\n\";\n    });\n\n    // restore \n    str = str.replace(/\\s*-\\u0000\\u0000-\\s*/g,\"\\n\");\n    \n    // remove all remaining html tags\n    str = str.replace(/<[^>]*>/g,\" \");\n    // remove duplicate spaces\n    str = str.replace(/[ ][ ]+/g,\" \");\n    // remove spaces before and after newlines\n    str = str.replace(/[ \\t]*\\n[ \\t]*/g,\"\\n\");\n    // remove more than 2 newlines in a row\n    str = str.replace(/\\n\\n+/g,\"\\n\\n\");\n    // restore hidden spaces (four (r) signs for two spaces)\n    str = str.replace(/-®®®®-/g,\"  \");\n    return str.trim();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/mail.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/smtp.js":
/*!*********************************************!*\
  !*** ./node_modules/nodemailer/lib/smtp.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var netlib = __webpack_require__(/*! net */ \"net\"),\n    fslib = __webpack_require__(/*! fs */ \"fs\"),\n    utillib = __webpack_require__(/*! util */ \"util\"),\n    oslib = __webpack_require__(/*! os */ \"os\"),\n    tlslib = __webpack_require__(/*! tls */ \"tls\"),\n    EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter),\n    starttls = __webpack_require__(/*! ./starttls.js */ \"(rsc)/./node_modules/nodemailer/lib/starttls.js\");\n\n/**\n * smtp\n * \n * This module handles the connection and message passing to a SMTP\n * server. SMTP is a simple text based protocol. Server is usually listening\n * on port 25. The client opens up a connection to the server,\n * server responds with \"220 hostname message\" thus indicating that\n * it is up and working. All server messages begin with a status code,\n * where codes starting with 4 or 5 are errors and 2 and 3 are normal states.\n * Most commands can't be used before a successful HELO or EHLO response.\n * E-mail message is ended with a single period on a line of itself. To not\n * create confusion, all periods in the beginning of ordinary lines should\n * be replaced with double periods. \"\\r\\n.this\" -> \"\\r\\n..this\"\n * \n * Actual recipients for the message are not taken from the message source\n * (To: Cc: and Bcc: fields) but from RCPT TO: commands. If there is more than\n * one recipient then the command can be entered multiple times.\n * \n *     {client establishes connection to the server}\n *     S: 220 node.ee\n *     C: HELO client.hostname\n *     S: 250 Hello client.hostname\n *     C: MAIL FROM:<andris@node.ee>\n *     S: 250 Ok\n *     C: RCPT TO:<andris@kreata.ee>\n *     S: 250 Ok\n *     C: RCPT TO:<andris.reinman@gmail.com>\n *     S: 250 Ok\n *     C: DATA\n *     S: 354 End with <CR><LF>.<CR><LF>\n *     C: From: Andris Reinman <andris@node.ee>\\r\\n\n *        To: Andris Reinman <andris@kreata.ee>\\r\\n\n *        Cc: Andris Reinman <andris.reinman@gmail.com>\\r\\n\n *        Subject: Test\\r\\n\n *        \\r\\n\n *        Hello, I'm sending myself a test message\\r\\n\n *        .\\r\\n\n *     S: 250 Ok: queued as B7AD718D9DFF\n *     C: QUIT\n *     S: 221 Good bye\n *     {the server closes the connection} \n * \n **/\n\n// expose constructor SMTPClient to the world\nexports.SMTPClient = SMTPClient;\n\n\n/**\n * new smtp.SMTPClient(host, port[, options])\n * - host (String): SMTP server hostname\n * - port (Number): SMTP server port\n * - options (Object): optional additional settings\n * \n * Constructs a wrapper for a SMTP connection as an EventEmitter type object.\n * \n * options can include following data:\n * \n * - hostname (String): hostname of the sending server, needed for handshake\n *   defaults to OS hostname or \"localhost\"\n * - use_authentication (Boolean): is authorization needed, default is false\n * - ssl (Boolean): use SSL (port 465)\n * - user (String): the username if authorization is needed\n * - pass (String): the password if authorization is needed\n * \n * Authorization is somewhat problematic with Node.JS v0.3.x since it doesn't\n * support setSecure which is needed to enter TLS state AFTER non-encrypted\n * SMTP handshake. Most servers doesn't accept plaintext passwords without TLS. \n * \n * Supported events:\n * \n * - 'connect' if a connection is opened successfully\n * - 'connection_stable' when the connection is finalized and this._connection will stay the same (generally add listeners here).\n * - 'error' if an uncatched error occurs\n * - 'close' when the connection closes\n *     \n **/\nfunction SMTPClient(host, port, options){\n    \n    // Needed to convert this constructor into EventEmitter\n    EventEmitter.call(this);\n    \n    // Public properties\n    // -----------------\n    this.host = host || \"localhost\";\n    this.options = options || {};\n    this.port = port || (this.options.ssl && 465 || 25);\n    \n    // defaul hostname is machine hostname or [IP]\n    var defaultHostname = (oslib.hostname && oslib.hostname()) || \n                          (oslib.getHostname && oslib.getHostname()) ||\n                          \"\";\n    if(defaultHostname.indexOf('.')<0){\n        defaultHostname = \"[127.0.0.1]\";\n    }\n    if(defaultHostname.match(/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/)){\n        defaultHostname = \"[\"+defaultHostname+\"]\";\n    }\n    \n    this.hostname = this.options.hostname || defaultHostname;\n    \n    this.ignore_data = false; //Ignore data events while this is true (starttls)\n\n    this.debug = !!this.options.debug;\n    this.instanceId = this.options.instanceId || \"X\";\n\n    this.sending = false;\n    this.logged_in = false; // Used for queueing and flushing\n    this.remote_pipelining = false; // Is pipelining enabled\n    this.remote_starttls = false;   // Is TLS enabled, currently no effect\n    this.remote_extended = true;    // Does the server support EHLO or HELO\n    \n    this.remote_auth_plain = false;    // Does the server support AUTH PLAIN\n    this.remote_auth_login = false;    // Does the server support AUTH LOGIN\n\n    // Not so public properties\n    // ------------------------\n    this._connected = false;   // Indicates if an active connection is available\n    this._connection = false;  // Holds connection info\n    this._callbackQueue = [];  // Queues the responses FIFO (needed for pipelining)\n    this._messageQueue = []; // Queues the messages FIFO\n    this._data_remainder = \"\"; // Needed to group multi-line messages from server, string buffer to prevent newline issue.\n    this._timeoutTimer = null;\n}\n// Needed to convert this constructor into EventEmitter\nutillib.inherits(SMTPClient, EventEmitter);\n\n///////////// PUBLIC METHODS /////////////\n\nSMTPClient.prototype._flushMessages = function() {\n    \n    if(this.sending) return;\n    \n    var smtp = this,\n        message = this._messageQueue.shift();\n        \n    if(!message) {\n        this.emit(\"empty\");\n        return;\n    }\n    \n    var mail = message.message,\n        callback = message.callback;\n        \n    this.sending = true;\n    mail.prepareVariables();\n    \n    var headers = mail.generateHeaders(),\n        body = mail.generateBody(),\n        i = 0,\n        //concat if you need to do forwards\n        toAddress = mail.toAddress.concat(),\n        fromAddress = mail.fromAddress;\n    \n    process.nextTick(nextSender);\n        \n    // closured functions\n    \n    function nextSender(){\n        if(i === fromAddress.length) {\n            i = 0;\n            nextRecipient();\n        }else{\n            smtp.send(\"MAIL FROM:<\"+fromAddress[i++]+\">\", function(error, message) {\n                if(error) {\n                    smtp.close();\n                    process.nextTick(function(){\n                        callback && callback(error, null);\n                    });\n                    return;\n                }\n                process.nextTick(nextSender);\n            });\n        }\n    }\n    \n    function nextRecipient(){\n        var address;\n        if(i === toAddress.length) {\n            smtp.send(\"DATA\",function(error, message) {\n                process.nextTick(sendBody);\n            });\n        }else{\n            address = toAddress[i++];\n            smtp.send(\"RCPT TO:<\"+address+\">\", function(error, message) {\n                var forwardAddress;\n                if(error) {\n                    //Empty addresses are valid (for server sent notifications).\n                    if(forwardAddress = error.message.match(/^551.*try\\s+([<][^>]*[>])/)) {\n                        mail.emit(\"forward\", address,forwardAddress[1]);\n                        toAddress.splice(i,0,forwardAddress[1])\n                        process.nextTick(nextRecipient);\n                        return;\n                    }\n                    //Not all error codes are true failures (we may be able to still send it to other recipients)\n                    else if(error.message.match(/^(?:552|554|451|452|500|503|421)/)){\n                        smtp.close();\n                        process.nextTick(function(){\n                            callback && callback(error, null);\n                        });\n                        return;\n                    }else{\n                        mail.emit(\"retain\", address);\n                        process.nextTick(nextRecipient);\n                        return;\n                    }\n                }\n                \n                if(message && /^251/.test(message.test)) {\n                    mail.emit(\"defer\",address);\n                } else {\n                    mail.emit(\"send\",address);\n                }\n                process.nextTick(nextRecipient);\n                \n            });\n        }\n    }\n    \n    // Sends e-mail body to the SMTP server and finishes up\n    function sendBody(){\n        smtp.send(headers+\"\\r\\n\\r\\n\");\n        smtp.send(body);\n        smtp.send(\"\\r\\n.\", function(error, message){\n            if(!error){\n                smtp.sending = false;\n                smtp._flushMessages();\n                process.nextTick(function(){\n                    callback && callback(null, true);\n                });\n            }else{\n                smtp.close();\n                process.nextTick(function(){\n                    callback && callback(null, false);\n                });\n            }\n        });\n    }\n}\n\nSMTPClient.prototype.sendMail = function sendMail(message, callback) {\n    this._messageQueue.push({\n        message:message,\n        callback:callback\n    });\n    if(this._messageQueue.length === 1) this._flushMessages();\n}\n\n/**\n * smtp.SMTPClient#send(data, callback) -> undefined\n * - data (String): text to be sent to the SMTP server\n * - callback (Function): callback to be used, gets params error and message\n * \n * Main method for the SMTPClient object. Sends a string to the server and\n * if callback is set returns the response. If callback is not set then\n * the endline chars \\r\\n are not appended automatically\n * \n * NB! This function is Pipelining safe but you should check the support for\n * it if needed (#remote_pipelining).\n * \n * Usage:\n * \n *     smtpclient.send(\"EHLO hostname\", function(error, message){\n *         if(error){\n *             console.log(\"Server responded with error \"+error.message);\n *         }else{\n *             console.log(\"Server responded with \"+message);\n *         }\n *     });\n * \n *     smtpclient.send(\"From: andris@node.ee\\r\\nTo: andris@kreata.ee\\r\\nSubject: test\\r\\n\");\n * \n * If there is no connection to the SMTP server, one is created automatically\n **/\nSMTPClient.prototype.send = function(data, callback){\n\n    if(!this._connected){\n        return this._createConnection(this.send.bind(this, data, callback));\n    }\n\n    if(callback){\n        this._sendCommand(data, callback);\n    }else{\n        this._sendData(data);\n    }\n\n}\n\n/**\n * smtp.SMTPClient#close() -> undefined\n * \n * Closes the current connection to the server. For some reason needed after\n * the e-mail is sent (with QUIT) but might be server specific.\n **/\nSMTPClient.prototype.close = function(){\n    this._connected && this._connection && this._connection.end();\n    this._connected = false;\n};\n\n///////////// PRIVATE METHODS /////////////\n\n/**\n * smtp.SMTPClient#_sendCommand(data, callback) -> undefined\n * - data (String): string value to be sent to the SMTP server\n * - callback (Function): function to be run after the server has responded\n * \n * Sends a string to the server, appends \\r\\n to the end so this is not\n * meant to send data (mail body) but commands.\n **/\nSMTPClient.prototype._sendCommand = function(data, callback){\n    this._callbackQueue.push({callback: callback});\n    this._connection.write(data+\"\\r\\n\");\n    \n    if(this.debug)\n        console.log(\"SEND (\"+this.instanceId+\"):\\n└──\"+JSON.stringify(data+\"\\r\\n\"));\n}\n\n/**\n * smtp.SMTPClient#_sendData(data) -> undefined\n * - data (String): Text to be sent to the server\n * \n * Sends a string to the server. This is meant to send body data and such.\n **/\nSMTPClient.prototype._sendData = function(data){\n    this._connection.write(data);\n    \n    if(this.debug)\n        console.log(\"SEND (\"+this.instanceId+\"):\\n└──\"+JSON.stringify(data));\n}\n\n/**\n * smtp.SMTPClient#_loginHandler(callback) -> undefined\n * - callback (Function): function to be run after successful login\n * \n * If authentication is needed, performs AUTH PLAIN or AUTH LOGIN and runs the\n * callback function after success or emits error on fail.\n * This method is called by #_handshake after successful connection\n * \n * Callback is set by the caller of #_createConnection which forwards it\n * to #_handshake whic in turn forwards it to #_loginHandler\n **/\nSMTPClient.prototype._loginHandler = function(callback){\n    if(!this.options.use_authentication){\n        this.logged_in = true;\n        callback();\n    }else{\n        if(this.remote_auth_plain){\n            // use AUTH PLAIN\n            this._authPlain(callback);\n        }else if(this.remote_auth_login){\n            // use AUTH LOGIN\n            this._authLogin(callback);\n        }else{\n            // try AUTH PLAIN anyway\n            this._authPlain(callback);\n        }\n        // TODO: Add CRAM-MD5 authentication as well\n    }\n}\n\n/**\n * smtp.SMTPClient#_authLogin(callback) -> undefined\n * - callback (Function): function to be run after successful login\n *\n * Performs an AUTH PLAIN login\n * \n * C: AUTH PLAIN BASE64(user\\0user\\0pass)\n **/\nSMTPClient.prototype._authPlain = function(callback){\n    this.send(\"AUTH PLAIN \"+new Buffer(\n        this.options.user+\"\\u0000\"+\n        this.options.user+\"\\u0000\"+\n        this.options.pass).toString(\"base64\"), (function(error, message){\n        if(error){\n            this.emit(\"error\", error);\n            this.close();\n            return;\n        }\n        // login success\n        this.logged_in = true;\n        this.emit(\"auth\");\n        callback();\n    }).bind(this));\n}\n\n/**\n * smtp.SMTPClient#_authLogin(callback) -> undefined\n * - callback (Function): function to be run after successful login\n *\n * Performs an AUTH LOGIN login\n * \n * C: AUTH LOGIN\n * S: 334 VXNlcm5hbWU6\n * C: BASE64_ENCODED_USERNAME\n * S: 334 UGFzc3dvcmQ6\n * C: BASE64_ENCODED_PASSWORD\n **/\nSMTPClient.prototype._authLogin = function(callback){\n    var username = new Buffer(this.options.user).toString(\"base64\"),\n        password = new Buffer(this.options.pass).toString(\"base64\");\n\n    this.send(\"AUTH LOGIN\", (function(error, message){\n        if(error){\n            this.emit(\"error\", error);\n            this.close();\n            return;\n        }\n        // wait for base64 encoded 334 Username:\n        if(message.trim()!=\"334 VXNlcm5hbWU6\"){\n            this.emit(\"error\", new Error(\"Bad response from server - '\"+message.trim()+\n                        \"' while expecting for '334 VXNlcm5hbWU6'\"));\n            this.close();\n            return;\n        }\n        this.send(username, (function(error, message){\n            if(error){\n                this.emit(\"error\", error);\n                this.close();\n                return;\n            }\n            // wait for base64 encoded 334 Password:\n            if(message.trim()!=\"334 UGFzc3dvcmQ6\"){\n                this.emit(\"error\", new Error(\"Bad response from server - '\"+message.trim()+\n                            \"' while expecting for '334 UGFzc3dvcmQ6'\"));\n                this.close();\n                return;\n            }\n            this.send(password, (function(error, message){\n                if(error){\n                    this.emit(\"error\", error);\n                    this.close();\n                    return;\n                }\n                // login success\n                this.logged_in = true;\n                this.emit(\"auth\");\n                callback();\n            }).bind(this));\n        }).bind(this));\n    }).bind(this));\n}\n\n/**\n * smtp.SMTPClient#_dataListener(data) -> undefined\n * - data(String): String received from the server\n * \n * The default listener for incoming server messages. Checks if there's\n * no errors and runs a callback function from #_callbackQueue.\n * If the first char of the response is higher than 3 then the response\n * is considered erroneus.\n **/\nSMTPClient.prototype._dataListener = function(data){\n    if(this.debug) console.log(\"Routing Data (\"+this.instanceId+\")\");\n    var action = this._callbackQueue.shift();\n    var isError = +data.trim().charAt(0)>3;\n    if(action && action.callback){\n        if(isError){\n            action.callback(new Error(data), null);\n        }else{\n            action.callback(null, data);\n        }\n    }else{\n        if(isError){\n            this.emit(\"error\", new Error(data));\n            this.close();\n        }else{\n            // what the hell just happened? this should never occur\n        }\n    }\n}\n\n/**\n * smtp.SMTPClient#_handshakeListener(data) -> undefined\n * - data(String): String received from the server\n * \n * Server data listener for the handshake - waits for the 220 response\n * from the server (connection established).\n **/\nSMTPClient.prototype._handshakeListener = function(data, callback){\n    if(this.debug)\n        console.log(\"CONNECTION (\"+this.instanceId+\"): \"+data.toString(\"utf-8\").trim());\n    if(data.toString(\"utf-8\").trim().substr(0,3)==\"220\"){\n        this._connected = true; // connection established\n        \n        if(this.debug)\n            console.log(\"Connection established! (\"+this.instanceId+\")\");\n        \n        this._handshake(callback);\n    }else{\n        \n        if(this.debug)\n            console.log(\"Connection failed! (\"+this.instanceId+\")\");\n        \n        var error = new Error(\"Server responded with \"+data);\n        this.emit(\"error\", error);\n        this.close();\n        return;\n    }\n}\n\n/**\n * smtp.SMTPClient#_starttlsHandler(callback) -> undefined\n * - callback (Function): Function to be run after connection\n * \n * Initiates a TLS session with the server\n **/\nSMTPClient.prototype._starttlsHandler = function(callback){\n    if(this.debug){\n        console.log(\"STARTTLS: (\"+this.instanceId+\")\");\n    }\n    this._sendCommand(\"STARTTLS\", (function(error, data){\n        if(error){\n            this.emit(\"error\", error);\n            this.close();\n            return;\n        }\n        this.ignore_data = true;\n        var ssl_socket;\n        ssl_socket = starttls(this._connection, this.options, (function(){\n            \n            if(this.debug && !ssl_socket.authorized){\n                console.log(\"▒▒▒ WARNING: TLS ERROR (\"+ssl_socket.authorizationError+\") ▒▒▒\");\n            }\n            \n            ssl_socket.on(\"data\",this._onData);\n            this._connection.removeListener(\"data\",this._onData);\n            this._connection = ssl_socket;\n            this.ignore_data = false;\n            this._data_remainder = \"\";\n            this.emit(\"connection_stable\");\n            callback();\n        }).bind(this));\n    }).bind(this));\n}\n\n/**\n * smtp.SMTPClient#_handshake(callback) -> undefined\n * - callback (Function): will be forwarded to login after successful connection\n * \n * Will be run after a TCP connection to the server is established. Makes\n * a EHLO command (fallbacks to HELO on failure) and forwards the callback to\n * login function on success.\n **/\nSMTPClient.prototype._handshake = function(callback){\n    \n    this.emit(\"connect\");\n    this._sendCommand(\"EHLO \"+this.hostname, (function(error, data){\n        if(error){\n\n            // fallback to HELO\n            this._sendCommand(\"HELO \"+this.hostname, (function(error, data){\n                if(error){\n                    this.emit(\"error\", error);\n                    this.close();\n                    return;\n                }\n                this.remote_extended = false;\n                this._loginHandler(callback);    \n            }).bind(this));\n            \n        }\n        \n        // check for pipelining support\n        if(data.match(/PIPELINING/i)){\n            this.remote_pipelining = true;\n        }\n        \n        // check for pipelining support\n        if(data.match(/AUTH(?:\\s+[^\\n]*\\s+|\\s+)PLAIN/i)){\n            this.remote_auth_plain = true;\n        }\n        // check for pipelining support\n        if(data.match(/AUTH(?:\\s+[^\\n]*\\s+|\\s+)LOGIN/i)){\n            this.remote_auth_login = true;\n        }\n        \n        // check for TLS support\n        if(data.match(/STARTTLS/i)){\n            if(!this.remote_starttls) {\n                this.remote_starttls = true;\n                // start tls and rerun HELO\n                this._starttlsHandler(this._handshake.bind(this,callback));\n                return;\n            }\n        }\n\n        this.emit(\"connection_stable\");\n        // check login after successful handshake\n        this._loginHandler(callback);\n    }).bind(this));\n}\n\n/**\n * smtp.SMTPClient#_waitForTimeout() -> function\n * \n * Waits for 10 seconds after connection and if nothing happened emits an error\n **/\nSMTPClient.prototype._waitForTimeout = function(time){\n    clearTimeout(this._timeoutTimer);\n    this._timeoutTimer = setTimeout((function(){\n        this.emit(\"error\", new Error(\"Timeout waiting for response from server\"));\n        this.close();\n    }).bind(this), time || 10*1000);\n}\n\n/**\n * smtp.SMTPClient#_onData(data) -> function\n * - callback (Function): callback function to be used with connection\n * - data (Buffer): binary data from the server\n * \n * Receives binary data from the server, converts it to string and forwards\n * to a registered listener. Concatenates multiline messages etc.\n **/\nSMTPClient.prototype._onData = function(callback, data){\n\n    clearTimeout(this._timeoutTimer);\n\n    if(!this._connected){\n        return this._handshakeListener(data, callback);\n    }\n    \n    if(this.debug)\n        console.log(\"RECEIVE (\"+this.instanceId+\"):\\n└──\"+JSON.stringify(data.toString(\"utf-8\")),JSON.stringify(this._data_remainder));\n        \n    if(this.ignore_data) return undefined;\n    \n    //Have to do a concat to prevent the split issue where a data packet splits a line\n    //IE: \"1-\\r\\n2 \" with data packets \"1\" \"-\\r\\n2 \", using the split method\n    // becomes [\"1\",\"-\",\"2 \"]\n    this._data_remainder = (data.toString(\"utf-8\") + this._data_remainder);\n    var match = /(?:^\\d+.*$\\r?\\n)*?(?:^\\d+[\\ ].*(?:\\r?\\n|$))/m.exec(this._data_remainder);\n    if(match && match.index === 0) {\n        this._data_remainder = this._data_remainder.slice(match[0].length);\n        this._dataListener(match[0].replace(/^\\s*$/mg,\"\"));\n    }\n    \n    return undefined;\n}\n\n/**\n * smtp.SMTPClient#_createConnection(callback) -> function\n * - callback (Function): function to be run after successful connection,\n *   smtp handshake and login\n * \n * Creates a TCP connection to the SMTP server and sets up needed listeners.\n **/\nSMTPClient.prototype._createConnection = function(callback){\n    \n    if (this.options.ssl) {\n        this._connection = tlslib.connect(this.port, this.host);\n    } else {\n        this._connection = netlib.createConnection(this.port, this.host);\n    }\n\n    this._connection.on(\"end\", (function(){\n        this._connected = false;\n    }).bind(this));\n    \n    this._connection.on(\"close\", (function(){\n        this._connected = false;\n        this.emit(\"close\");\n    }).bind(this));\n    \n    this._connection.on(\"timeout\", (function(){\n        this.close();\n    }).bind(this));\n    \n    this._connection.on(\"error\", (function(error){\n        this.emit(\"error\", error);\n        this.close();\n    }).bind(this));\n    \n    //30 seconds to connect\n    this._waitForTimeout(30 * 1000);\n    //10 seconds for data\n    this._connection.on(\"connect\", this._waitForTimeout.bind(this));\n    this._connection.on(\"data\", this._onData = this._onData.bind(this, callback));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/smtp.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/starttls.js":
/*!*************************************************!*\
  !*** ./node_modules/nodemailer/lib/starttls.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Target API:\n//\n//  var s = require('net').createStream(25, 'smtp.example.com');\n//  s.on('connect', function() {\n//   require('starttls')(s, options, function() {\n//      if (!s.authorized) {\n//        s.destroy();\n//        return;\n//      }\n//\n//      s.end(\"hello world\\n\");\n//    });\n//  });\n//\n//\n\nmodule.exports = function starttls(socket, options, cb) {\n\n    var sslcontext = (__webpack_require__(/*! crypto */ \"crypto\").createCredentials)(options),\n        pair = (__webpack_require__(/*! tls */ \"tls\").createSecurePair)(sslcontext, false),\n        cleartext = pipe(pair, socket);\n\n    pair.on('secure', function() {\n        var verifyError = (pair._ssl || pair.ssl).verifyError();\n\n        if (verifyError) {\n            cleartext.authorized = false;\n            cleartext.authorizationError = verifyError;\n        } else {\n            cleartext.authorized = true;\n        }\n\n        if (cb) cb();\n    });\n\n    cleartext._controlReleased = true;\n    return cleartext;\n};\n\nfunction forwardEvents(events,emitterSource,emitterDestination) {\n    var map = {}, name, handler;\n    for(var i = 0; i < events.length; i++) {\n        name = events[i];\n        handler = (function generateForwardEvent(){\n            return function forwardEvent(name) {\n                return emitterDestination.emit.apply(emitterDestination, arguments);\n            }\n        })(name);\n        map[name] = handler;\n        emitterSource.on(name, handler);\n    }\n    return map;\n}\n\nfunction removeEvents(map,emitterSource) {\n    for(var k in map) {\n        emitterSource.removeListener(k,map[k])\n    }\n}\n\nfunction pipe(pair, socket) {\n    pair.encrypted.pipe(socket);\n    socket.pipe(pair.encrypted);\n\n    pair.fd = socket.fd;\n    \n    var cleartext = pair.cleartext;\n  \n    cleartext.socket = socket;\n    cleartext.encrypted = pair.encrypted;\n    cleartext.authorized = false;\n\n    function onerror(e) {\n        if (cleartext._controlReleased) {\n            cleartext.emit('error', e);\n        }\n    }\n\n    var map = forwardEvents([\"timeout\",\"end\",\"close\"], socket, cleartext);\n  \n    function onclose() {\n        socket.removeListener('error', onerror);\n        socket.removeListener('close', onclose);\n        removeEvents(map,socket)\n    }\n\n    socket.on('error', onerror);\n    socket.on('close', onclose);\n\n    return cleartext;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvc3RhcnR0bHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTs7QUFFQTs7QUFFQSxxQkFBcUIsK0RBQW1DO0FBQ3hELGVBQWUsd0RBQStCO0FBQzlDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGdCQUFnQjtBQUNoQixtQkFBbUIsbUJBQW1CO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NoYWlhdXJjb2RlLy4vbm9kZV9tb2R1bGVzL25vZGVtYWlsZXIvbGliL3N0YXJ0dGxzLmpzP2ExYTIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGFyZ2V0IEFQSTpcbi8vXG4vLyAgdmFyIHMgPSByZXF1aXJlKCduZXQnKS5jcmVhdGVTdHJlYW0oMjUsICdzbXRwLmV4YW1wbGUuY29tJyk7XG4vLyAgcy5vbignY29ubmVjdCcsIGZ1bmN0aW9uKCkge1xuLy8gICByZXF1aXJlKCdzdGFydHRscycpKHMsIG9wdGlvbnMsIGZ1bmN0aW9uKCkge1xuLy8gICAgICBpZiAoIXMuYXV0aG9yaXplZCkge1xuLy8gICAgICAgIHMuZGVzdHJveSgpO1xuLy8gICAgICAgIHJldHVybjtcbi8vICAgICAgfVxuLy9cbi8vICAgICAgcy5lbmQoXCJoZWxsbyB3b3JsZFxcblwiKTtcbi8vICAgIH0pO1xuLy8gIH0pO1xuLy9cbi8vXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3RhcnR0bHMoc29ja2V0LCBvcHRpb25zLCBjYikge1xuXG4gICAgdmFyIHNzbGNvbnRleHQgPSByZXF1aXJlKCdjcnlwdG8nKS5jcmVhdGVDcmVkZW50aWFscyhvcHRpb25zKSxcbiAgICAgICAgcGFpciA9IHJlcXVpcmUoJ3RscycpLmNyZWF0ZVNlY3VyZVBhaXIoc3NsY29udGV4dCwgZmFsc2UpLFxuICAgICAgICBjbGVhcnRleHQgPSBwaXBlKHBhaXIsIHNvY2tldCk7XG5cbiAgICBwYWlyLm9uKCdzZWN1cmUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZlcmlmeUVycm9yID0gKHBhaXIuX3NzbCB8fMKgcGFpci5zc2wpLnZlcmlmeUVycm9yKCk7XG5cbiAgICAgICAgaWYgKHZlcmlmeUVycm9yKSB7XG4gICAgICAgICAgICBjbGVhcnRleHQuYXV0aG9yaXplZCA9IGZhbHNlO1xuICAgICAgICAgICAgY2xlYXJ0ZXh0LmF1dGhvcml6YXRpb25FcnJvciA9IHZlcmlmeUVycm9yO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2xlYXJ0ZXh0LmF1dGhvcml6ZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNiKSBjYigpO1xuICAgIH0pO1xuXG4gICAgY2xlYXJ0ZXh0Ll9jb250cm9sUmVsZWFzZWQgPSB0cnVlO1xuICAgIHJldHVybiBjbGVhcnRleHQ7XG59O1xuXG5mdW5jdGlvbiBmb3J3YXJkRXZlbnRzKGV2ZW50cyxlbWl0dGVyU291cmNlLGVtaXR0ZXJEZXN0aW5hdGlvbikge1xuICAgIHZhciBtYXAgPSB7fSwgbmFtZSwgaGFuZGxlcjtcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG5hbWUgPSBldmVudHNbaV07XG4gICAgICAgIGhhbmRsZXIgPSAoZnVuY3Rpb24gZ2VuZXJhdGVGb3J3YXJkRXZlbnQoKXtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBmb3J3YXJkRXZlbnQobmFtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbWl0dGVyRGVzdGluYXRpb24uZW1pdC5hcHBseShlbWl0dGVyRGVzdGluYXRpb24sIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKG5hbWUpO1xuICAgICAgICBtYXBbbmFtZV0gPSBoYW5kbGVyO1xuICAgICAgICBlbWl0dGVyU291cmNlLm9uKG5hbWUsIGhhbmRsZXIpO1xuICAgIH1cbiAgICByZXR1cm4gbWFwO1xufVxuXG5mdW5jdGlvbiByZW1vdmVFdmVudHMobWFwLGVtaXR0ZXJTb3VyY2UpIHtcbiAgICBmb3IodmFyIGsgaW4gbWFwKSB7XG4gICAgICAgIGVtaXR0ZXJTb3VyY2UucmVtb3ZlTGlzdGVuZXIoayxtYXBba10pXG4gICAgfVxufVxuXG5mdW5jdGlvbiBwaXBlKHBhaXIsIHNvY2tldCkge1xuICAgIHBhaXIuZW5jcnlwdGVkLnBpcGUoc29ja2V0KTtcbiAgICBzb2NrZXQucGlwZShwYWlyLmVuY3J5cHRlZCk7XG5cbiAgICBwYWlyLmZkID0gc29ja2V0LmZkO1xuICAgIFxuICAgIHZhciBjbGVhcnRleHQgPSBwYWlyLmNsZWFydGV4dDtcbiAgXG4gICAgY2xlYXJ0ZXh0LnNvY2tldCA9IHNvY2tldDtcbiAgICBjbGVhcnRleHQuZW5jcnlwdGVkID0gcGFpci5lbmNyeXB0ZWQ7XG4gICAgY2xlYXJ0ZXh0LmF1dGhvcml6ZWQgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIG9uZXJyb3IoZSkge1xuICAgICAgICBpZiAoY2xlYXJ0ZXh0Ll9jb250cm9sUmVsZWFzZWQpIHtcbiAgICAgICAgICAgIGNsZWFydGV4dC5lbWl0KCdlcnJvcicsIGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIG1hcCA9IGZvcndhcmRFdmVudHMoW1widGltZW91dFwiLFwiZW5kXCIsXCJjbG9zZVwiXSwgc29ja2V0LCBjbGVhcnRleHQpO1xuICBcbiAgICBmdW5jdGlvbiBvbmNsb3NlKCkge1xuICAgICAgICBzb2NrZXQucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgICAgIHNvY2tldC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICAgICAgcmVtb3ZlRXZlbnRzKG1hcCxzb2NrZXQpXG4gICAgfVxuXG4gICAgc29ja2V0Lm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIHNvY2tldC5vbignY2xvc2UnLCBvbmNsb3NlKTtcblxuICAgIHJldHVybiBjbGVhcnRleHQ7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/starttls.js\n");

/***/ })

};
;